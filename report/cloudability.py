import json
import os.path
import requests

RIGHTSIZING_CACHE_NAME = 'rightsizing_cache.json'

DEFAULT_PAGING_SIZE = 10000

RIGHTSIZING_URL = ("https://api.cloudability.com"
"/v3/rightsizing/aws/recommendations/ec2"
"?viewId=0&limit={limit}&offset={offset}")


def _paged_request(limit, offset, cloudability_api_key):
    print("making request for portion: {0}, {0} + {1}".format(offset, limit))
    url = RIGHTSIZING_URL.format(offset=offset, limit=limit)
    print(url)
    r = requests.get(url, auth=(cloudability_api_key, cloudability_api_key))
    r.raise_for_status()
    data = r.json()
    print("length:", len(data['result']))
    return data


def get_rightsizing_data(cloudability_api_key, use_cache=True, page_size=DEFAULT_PAGING_SIZE):
    '''
    Get complete rightsizing report from cloudability.
    Caches into a local file - this feature is alpha only; will be removed.

    report is a dict with fields:
    .meta
    ---
    {
      "totalCount": ...
      "aggregates": [
        {
          "basis": "Adjusted",
          "costAdjusted": ...
          "idleSavingsAdjusted": ...
          "rightsizeSavingsAdjusted": ...
          "optimizedSavingsAdjusted": ...
        }
      ]
    }
    .result[*]
    ---
    {
      "name": "(not set)",
      "resourceIdentifier": "i-0...
      "vendorAccountId": ...
      "tags": [
        {
          "vendorKey": "tag_user_key",
          "vendorValue": "value"
        }, ...
      ],
      "availabilityZone": ...
      "region": ...
      "os": ...
      "nodeType": ...
      "effectiveHourlyAdjusted": ...
      "totalSpendAdjusted": ...
      "idle": ...
      "localCapacity": ...
      "localDrives": ...
      "cpuCapacity": ...
      "memoryCapacity": ...
      "networkCapacity": ...
      "lastSeen": ...
      "tenancy": ...
      "hoursRunning": ...
      "cpuMax": ...
      "memoryMax": ...
      "recommendations": [
        {
          "action": "Rightsize",
          "preferenceOrderAdjusted": 1,
          "defaultsOrderAdjusted": ...
          "nodeType": ...
          "localCapacity": ...
          "localDrives": ...
          "cpuCapacity": ...
          "memoryCapacity": ...
          "networkCapacity": ...
          "previousGenTarget": ...
          "currentGen": ...
          "sameMemory": ...
          "sameFamily": ...
          "effectiveHourlyAdjusted": ...
          "cpuRatio": ...
          "memoryRatio": ...
          "diskXPutCapacity": ...
          "networkRatio": ...
          "cpuRisk": ...
          "memoryRisk": ...
          "diskRisk": ...
          "networkRisk": ...
          "risk": ...
          "savingsPctAdjusted": ...
          "savingsAdjusted": ...
          "inDefaults": ...
          "memoryFit": ...
          "persistentStorageAdded": ...
        }, ...
      ],
      "defaultSameFamily": ...
      "defaultCurrentGen": ...
      "defaultMemoryFit": true
    }
    '''
    if use_cache and os.path.isfile(RIGHTSIZING_CACHE_NAME):
        print("getting rightsizing data from cache:", RIGHTSIZING_CACHE_NAME)
        with open(RIGHTSIZING_CACHE_NAME, 'r') as f:
            data = json.load(f)
            return data

    print('requesting data from cloudability')
    initial_data = _paged_request(0, 0, cloudability_api_key)
    total_count = int(initial_data['meta']['totalCount'])

    result = []
    meta = None
    for offset in range(0, total_count, page_size):
        data = _paged_request(page_size, offset, cloudability_api_key)
        if not meta:
            meta = data['meta']
        result = result + data['result']

    print('succeeded requesting data from cloudability')

    print("got results, count:", len(result))
    data = {
        "result": result,
        "meta": meta
    }
    if use_cache:
        with open(RIGHTSIZING_CACHE_NAME, 'x') as f:
            print("saving result to ", RIGHTSIZING_CACHE_NAME)
            json.dump(data, f)

    return data


def get_tag_value(instance, want_tag, tag_prefix='tag_user_'):
    '''
    Get a tag value out of an instance item.
    case insensitive
    Tag prefix is the prefix added by cloudability, defaults to tag_user_.
    '''
    if not instance['tags']:
        return None
    for tag in instance['tags']:
        if tag['vendorKey'].lower() == (tag_prefix + want_tag).lower():
            return tag['vendorValue']
    return None
